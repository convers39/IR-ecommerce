version: "3.8"

services:
  django:
    restart: always
    build:
      context: .
      dockerfile: ./dockerfile.prod
    container_name: django
    image: 543353045438.dkr.ecr.ap-northeast-1.amazonaws.com/django-ec2:django
    command: gunicorn --workers=2 --bind=0.0.0.0:8000 core.wsgi:application
    volumes:
      # - .:/usr/src/app
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
      # - ./nginx/certs/:/etc/certs
    # ports:
    #   - "8000:8000"
    expose:
      - 8000
    env_file:
      - ./core/env/env.staging
    depends_on:
      # - pgdb
      - redis
  celery:
    restart: always
    build:
      context: .
      dockerfile: ./dockerfile.prod
    container_name: celery
    entrypoint: /bin/sh
    command: ./docker.celery.sh
    volumes:
      # - .:/usr/src/app
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    env_file:
      - ./core/env/env.staging
    depends_on:
      - django
      - redis
  # pgdb:
  #   image: postgres:alpine
  #   container_name: pgdb
  #   env_file: core/env/env.prod.db
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data/
  redis:
    restart: always
    image: redis:alpine
    container_name: redis
    volumes:
      - redisdata:/data
  # nginx:
  #   restart: always
  #   image: nginx:latest
  #   container_name: nginx
  #   ports:
  #     - "443:443"
  #     - "80:80"
  #   volumes:
  #     - ./static:/www/static
  #     - ./nginx/:/etc/nginx/conf.d
  #     - ./nginx/certs/:/etc/certs
  #   depends_on:
  #     - django
  nginx-proxy:
    container_name: nginx-proxy
    build: ./nginx
    image: 543353045438.dkr.ecr.ap-northeast-1.amazonaws.com/django-ec2:nginx
    restart: always
    ports:
      - 443:443
      - 80:80
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
    depends_on:
      - django
  nginx-proxy-letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    env_file:
      - ./core/env/env.staging.proxy-companion
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
    depends_on:
      - nginx-proxy
volumes:
  # pgdata:
  redisdata:
  static_volume:
  media_volume:
  certs:
  html:
  vhost:
